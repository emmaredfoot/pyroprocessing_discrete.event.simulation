########################################################################
# R.A.Borrelli
# @TheDoctorRAB 
########################################################################
#
#
#
########################################################################
### Introduction
#
# This the discrete event simulation (DES) module for the fuel fabrication system in pyroprocessing.
# U,TRU,Zr arrive into the system into a storage buffer.
# Materials are melted by injection casting to form metal rods.
# The metal rods are trimmed to make fuel slugs.
# The fuel slugs are 'processed' into a final storage bufer.
#
# Although a fairly simple process, it quickly becomes complicated, due to measurement events (KMPx), equipment failures, subsequent maintenance, false alarms.
# The code tracks inventory processed, batch weight per campaign, materials unaccounted for (MUF), along with all the above.
# Data, data, data.
#
# Operationally, the goal is to process as many campaigns within the operation time.
# Equipment failures would affect operational goals due to maintenance delays.
# Safeguardability comes in because plutonium is being processed.
# The MUF cannot be so large as to indicate there was a diversion. 
# So, optimization is needed between processing as much material as possible, but minimizing MUF and potential false alarms. 
# 
# It is largely a matter of materials accounting and tracking operation time.
# Accurate materials accounting is essential to safeguardability. 
#
# It is intended that this initial code is a test run for pyroprocessing and DES.
# Later, this will become its own class and integrate with the other pyroprocessing systems to form the safeguardability assessment model.
#
########################################################################
#
#
########################################################################
### File tree
#
# mainflow_fuel_fabrication: command and control for fuel fabrication
# io_functions: data initialization and writing as the simulation progresses
# postprocessing_plot: all of the plots
#
########################################################################
#
#
########################################################################
### Simulation notes
#
# One campaign = the processing of one batch.
# 1 time unit = 1 DAY.
# Mass is based on kg.
# Results are the number of batches processed per operational period.
# False alarm probability is functionally dependent on equipment falure rate.
#
########################################################################
#
#
########################################################################
### Vertices 
#
# 0. storage
# 1. melter/injection casting 
# 2. trimmer
# 3. recycle
# 4. product
# x. maintenance
#
# State changes only occur at these vericies. 
# Realistically, the true weight is unknown until it is measured (KMPs). 
# Maintence is outside of the main process loop because it is triggered on an equipment failure. 
# 
# Material would not flow to maintenance realistically.
# The cleaning procedure is essentially embedded in the maintenance module.
# Cleaning is needed to remove the heel from the melter equipment.
# Equipment cannot be removed for maintenance unless SNM is cleaned out.
#
# The index for each vertex is its label in the code; i.e., process_time[1] is the time elapsed for melting.  
# 
########################################################################
#
#
#
########################################################################
### System diagram
#
# See fuel.fabrication.md for the actual diagram.
#
# KMP(0): storage transfer to melter
# KMP(1): melter to trimmer
# KMP(2): trimmer to final processing
# KMP(3): melter to recycle
# KMP(-3): recycle back to melter (KMP4 in output)
#
# The KMPs will eventually be able to be turned 'on' or 'off' for different facility configurations.
# Then, the model is run to quantify the safeguardability of each design proposal. 
#
########################################################################